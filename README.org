#+TITLE: README
#+AUTHOR: Adolfo Villafiorita
#+STARTUP: showall

* Introduction

LogSense generates reports and statistics from Apache and Ruby on
Rails logs.  Written in Ruby, it runs from the command line, it is
fast, and it can be installed on any system with a relatively recent
version of Ruby.  We tested on Ruby 2.6.9, Ruby 3.0.x and later.

LogSense reports the following data:

- Visitors, hits, unique visitors, bandwidth used
- Most accessed HTML pages
- Most accessed resources  
- Response statuses
- Referers
- OS, browsers, and devices
- IP Country location, thanks to the DPIP lite country DB
- Streaks: resources accessed by a given IP over time
- Potential attacks: access to resources which are not meant to be
  served by a web server serving static websites
- Performance of Rails requests
 
Filters from the command line allow to analyze specific periods and
distinguish traffic generated by self polls and crawlers.

LogSense generates HTML, txt, and SQLite outputs.

And, of course, the compulsory screenshot:

#+ATTR_HTML: :width 80%
[[file:./apache-screenshot.png]]

* Motivation

LogSense moves along the lines of tools such as [[https://goaccess.io/][GoAccess]] (which
strongly inspired the development of Log Sense) and [[https://umami.is/][Umami]], focusing on
*privacy* and *data-ownership*: the data generated by LogSense is
stored on your computer and owned by you (like it should be)[fn:1].

LogSense is also inspired by *static websites generators*: statistics
are generated from the command line and accessed as static HTML files.
LogSense thus significantly reduces the attack surface of your
web server and installation headaches.  We have, for instance, a cron
job running on our servers, generating statistics at night.  The
generated files are then made available on a private area on the web.


* Installation

  #+begin_src bash
  gem install log_sense
  #+end_src

* Usage

  #+begin_src bash :results raw output :wrap example
  log_sense --help
  #+end_src

  #+RESULTS:
  #+begin_example
  Usage: log_sense [options] [logfile]
          --title=TITLE                Title to use in the report
      -f, --input-format=FORMAT        Input format (either rails or apache)
      -i, --input-file=INPUT_FILE      Input file
      -t, --output-format=FORMAT       Output format: html, org, txt, sqlite. See below for available formats
      -o, --output-file=OUTPUT_FILE    Output file
      -b, --begin=DATE                 Consider entries after or on DATE
      -e, --end=DATE                   Consider entries before or on DATE
      -l, --limit=N                    Number of entries to show (defaults to 30)
      -c, --crawlers=POLICY            Decide what to do with crawlers (applies to Apache Logs)
      -n, --no-selfpolls               Ignore self poll entries (requests from ::1; applies to Apache Logs)
      -v, --version                    Prints version information
      -h, --help                       Prints this help

  This is version 1.3.1

  Output formats
  rails parsing can produce the following outputs:
    - sqlite
    - txt
    - html
  apache parsing can produce the following outputs:
    - sqlite
    - html
  #+end_example

Examples:

#+begin_example sh
log_sense -f apache -i access.log -t txt > access-data.txt
log_sense -f rails -i production.log -t html -o performance.txt
#+end_example

* Change Log

See the [[file:CHANGELOG.org][CHANGELOG]] file.

* Compatibility

LogSense should run on any system on which a recent version of Ruby
runs.  We tested it with Ruby 2.6.9 and Ruby 3.x.x.

Concerning the outputs:

- HTML reports use [[https://get.foundation/][Zurb Foundation]], [[https://www.datatables.net/][Data Tables]], and [[https://vega.github.io/vega-lite/][Vega Light]], which
  are all downloaded from a CDN
- The textual format is compatible with [[https://orgmode.org/][Org Mode]] and can be further
  processed to any format [[https://orgmode.org/][Org Mode]] can be exported to (including HTML
  and PDF)

* Author and Contributors

[[https://shair.tech][Shair.Tech]]

* Known Bugs

No known bugs; an unknown number of unknown bugs.
(See the open issues for the known bugs.)

* License

Distributed under the terms of the [[http://opensource.org/licenses/MIT][MIT License]].

Geolocation is made possible by the DB-IP.com IP to City database,
released under a CC license.

[fn:1] There is a small catch: CSS and JavaScript for layout and plots
are downloaded from a CDN.  Technically, thus, if you generate HTML
reports and open them, a request is performed and the CDN might keep a
track (see [[https://en.wikipedia.org/wiki/Content_delivery_network#Security_and_privacy][CDN Security and Privacy on Wikipedia]] for more details).
Textual reports don't have this issue.
