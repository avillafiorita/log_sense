#!/usr/bin/env ruby

require 'log_sense.rb'

#
# Parse Command Line Arguments
#

# this better be here... OptionsParser consumes ARGV
@command_line = ARGV.join(' ')
@options     = LogSense::OptionsParser.parse ARGV
@output_file = @options[:output_file]

if ARGV.map { |x| File.exist?(x) }.include?(false)
  $stderr.puts "Error: input file(s) '#{ARGV.reject { |x| File.exist(x) }.join(', ')}' do not exist"
  exit 1
end
@input_files = ARGV.empty? ? [$stdin] : ARGV.map { |x| File.open(x, 'r') }

#
# Parse Log and Track Statistics
#

@started_at = Time.now

case @options[:input_format]
when 'apache'
  parser_klass = LogSense::ApacheLogParser
  cruncher_klass = LogSense::ApacheDataCruncher
when 'rails'
  parser_klass = LogSense::RailsLogParser
  cruncher_klass = LogSense::RailsDataCruncher
else
  $stderr.puts "Error: input format #{@options[:input_format]} not understood."
  exit 1
end

$stderr.puts "Parsing input files..." if @options[:verbose]
@db = parser_klass.parse @input_files

if @options[:output_format] == 'sqlite'
  $stderr.puts "Saving to SQLite3..." if @options[:verbose]
  ddb = SQLite3::Database.new(@output_file || 'db.sqlite3')
  b = SQLite3::Backup.new(ddb, 'main', @db, 'main')
  b.step(-1) #=> DONE
  b.finish
else
  $stderr.puts "Aggregating data..." if @options[:verbose]
  @data = cruncher_klass.crunch @db, @options

  $stderr.puts "Geolocating..." if @options[:verbose]
  @data = LogSense::IpLocator.geolocate @data

  $stderr.puts "Grouping by country..." if @options[:verbose]
  country_col = @data[:ips][0].size - 1
  @data[:countries] = @data[:ips].group_by { |x| x[country_col] }

  @ended_at = Time.now
  @duration = @ended_at - @started_at

  @data = @data.merge({
                        command: @command_line,
                        filenames: ARGV,
                        log_files: @input_files,
                        started_at: @started_at,
                        ended_at: @ended_at,
                        duration: @duration,
                        width: @options[:width]
                      })
  #
  # Emit Output
  #
  $stderr.puts "Emitting..." if @options[:verbose]
  puts LogSense::Emitter.emit @data, @options
end
